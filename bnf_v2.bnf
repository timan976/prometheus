%token int_const char_const float_const id classname string
%%

translation_unit       ::= external_decl
                         | translation_unit external_decl
                        
external_decl          ::= function_definition
                         | decl
                        
function_definition    ::= type_spec declarator decl_list compound_stat
#                        |           declarator decl_list compound_stat
                         | type_spec declarator           compound_stat
                         |           declarator           compound_stat
                        
decl                   ::= decl_specs init_declarator_list ';'
#                        | decl_specs                      ';'
                        
decl_list              ::= decl
                         | decl_list decl
                        
# Does this really need to be recursive? - FIXED
decl_specs             ::= type_spec
#                        | type_spec decl_specs
#                        | type_qualifier decl_specs
#                        | type_qualifier
                    
type_spec              ::= 'Void'
                         | classname

#type_spec             ::= 'void' | 'char' | 'short' | 'int' | 'long' | 'float'
#                        | 'double' | 'signed' | 'unsigned'
#                        | struct_or_union_spec
#                        | typedef_name
                        
#type_qualifier         ::= 'const' | 'volatile'
                        
#struct_or_union_spec   ::= struct_or_union id '{' struct_decl_list '}'
#                         | struct_or_union       '{' struct_decl_list '}'
#                         | struct_or_union id
#                        
#struct_or_union        ::= 'struct' | 'union'
                        
#struct_decl_list       ::= struct_decl
#                         | struct_decl_list struct_decl
                        
init_declarator_list   ::= init_declarator
                         | init_declarator_list ',' init_declarator
                        
init_declarator        ::= declarator
                         | declarator '=' assignment_exp
#                        | declarator '=' initializer
                        
#struct_decl            ::= spec_qualifier_list struct_declarator_list ';'
                        
spec_qualifier_list    ::= type_spec spec_qualifier_list
                         | type_spec
#                         | type_qualifier spec_qualifier_list
#                         | type_qualifier
                        
#struct_declarator_list ::= struct_declarator
#                         | struct_declarator_list ',' struct_declarator
#                        
#struct_declarator      ::= declarator
#                         | declarator ':' const_exp
#                         |            ':' const_exp
                        
declarator             ::= id
#                        | '(' declarator ')'
                         | declarator '[' const_exp ']'
#                        | declarator '['         ']'
#                        | declarator '(' param_type_list ')'
#                        | declarator '(' id_list ')'
#                        | declarator '('         ')'
                        
#type_qualifier_list    ::= type_qualifier
#                         | type_qualifier_list type_qualifier
                        
param_type_list        ::= param_list
#                        | param_list ',' '...'
                        
param_list             ::= param_decl
                         | param_list ',' param_decl
                        
param_decl             ::= decl_specs declarator
#                        | decl_specs direct_abstract_declarator
                         | decl_specs
                        
id_list                ::= id
                         | id_list ',' id
                        
#initializer            ::= assignment_exp
#                         | '{' initializer_list '}'
#                         | '{' initializer_list ',' '}'
#                        
#initializer_list       ::= initializer
#                         | initializer_list ',' initializer
                        
#type_name              ::= spec_qualifier_list direct_abstract_declarator
#                         | spec_qualifier_list
                        
direct_abstract_declarator ::= '(' direct_abstract_declarator ')'
                         | direct_abstract_declarator '[' const_exp ']'
                         |                            '[' const_exp ']'
                         | direct_abstract_declarator '['           ']'
                         |                            '['           ']'
                         | direct_abstract_declarator '(' param_type_list ')'
                         |                            '(' param_type_list ')'
                         | direct_abstract_declarator '('                 ')'
                         |                            '('                 ')'
                        
typedef_name           ::= id
                        
stat                   ::= labeled_stat
                         | exp_stat
                         | compound_stat
                         | selection_stat
                         | iteration_stat
                         | jump_stat
						 | print_stat
						 | block_stat
                        
labeled_stat           ::= 'case' const_exp ':' stat
                         | 'default' ':' stat
                        
exp_stat               ::= exp ';'
                         | ';'
                        
compound_stat          ::= '{' decl_list stat_list '}'
                         | '{'           stat_list '}'
                         | '{' decl_list           '}'
                         | '{'                     '}'
                        
stat_list              ::= stat
                         | stat_list stat
                        
selection_stat         ::= 'if' '(' exp ')' stat
                         | 'if' '(' exp ')' stat 'else' stat
                         | 'switch' '(' exp ')' stat
                        
iteration_stat         ::= 'while' '(' exp ')' stat
#                        | 'do' stat 'while' '(' exp ')' ';'
                         | 'for' '(' exp ';' exp ';' exp ')' stat
                         | 'for' '(' exp ';' exp ';'     ')' stat
                         | 'for' '(' exp ';'     ';' exp ')' stat
                         | 'for' '(' exp ';'     ';'     ')' stat
                         | 'for' '('     ';' exp ';' exp ')' stat
                         | 'for' '('     ';' exp ';'     ')' stat
                         | 'for' '('     ';'     ';' exp ')' stat
                         | 'for' '('     ';'     ';'     ')' stat
                        
jump_stat              ::= 'continue' ';'
                         | 'break' ';'
                         | 'return' exp ';'
                         | 'return'      ';'

print_stat             ::= 'print' exp_stat 

block_stat             ::= '^' '(' ')' compound_stat
                         | '^' '(' param_type_list ')' compound_stat
                        
exp                    ::= assignment_exp
                         | exp ',' assignment_exp
                        
assignment_exp         ::= conditional_exp
                         | unary_exp assignment_operator assignment_exp
                        
assignment_operator    ::= '=' | '*=' | '/=' | '%=' | '+=' | '-='
                        
conditional_exp        ::= logical_or_exp
                         | logical_or_exp '?' exp ':' conditional_exp
						 | logical_or_exp '?' ':' conditional_exp
                        
const_exp              ::= conditional_exp
                        
logical_or_exp         ::= logical_and_exp
                         | logical_or_exp '||' logical_and_exp
                        
logical_and_exp        ::= equality_exp
                         | logical_and_exp '&&' equality_exp
                        
equality_exp           ::= relational_exp
                         | equality_exp '==' relational_exp
                         | equality_exp '!=' relational_exp
                        
relational_exp         ::= additive_exp
                         | relational_exp '<' additive_exp
                         | relational_exp '>' additive_exp
                         | relational_exp '<=' additive_exp
                         | relational_exp '>=' additive_exp
                        
additive_exp           ::= mult_exp
                         | additive_exp '+' mult_exp
                         | additive_exp '-' mult_exp
                        
mult_exp               ::= unary_exp
                         | mult_exp '*' unary_exp
                         | mult_exp '/' unary_exp
                         | mult_exp '%' unary_exp
                        
unary_exp              ::= postfix_exp
                         | '++' unary_exp
                         | '--' unary_exp
                         | unary_operator unary_exp
                        
unary_operator         ::= '+' | '-' | '!'
                        
postfix_exp            ::= primary_exp
                         | postfix_exp '[' exp ']'
                         | postfix_exp '(' argument_exp_list ')'
                         | postfix_exp '('                       ')'
                         | postfix_exp '.' id
#                        | postfix_exp '->' id
                         | postfix_exp '++'
                         | postfix_exp '--'
                         | '[' argument_exp_list ']'
                         | '@' '[' key_value_list ']'
                        
primary_exp            ::= id
                         | const
                         | string
                         | '(' exp ')'
                        
argument_exp_list      ::= assignment_exp
                         | argument_exp_list ',' assignment_exp

key_value_exp          ::= assignment_exp ':' assignment_exp

key_value_list         ::= key_value_exp
                         | key_value_list ',' key_value_exp
                        
const                  ::= int_const
                         | char_const
                         | float_const
                        
